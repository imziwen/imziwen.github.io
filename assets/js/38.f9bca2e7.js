(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{389:function(e,t,a){"use strict";a.r(t);var s=a(25),v=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[e._v("#")]),e._v(" 浏览器缓存")]),e._v(" "),a("blockquote",[a("p",[e._v("浏览器缓存就是浏览器请求网站留下的资源副本，保存资源副本并在下次请求时直接使用该副本的技术。\n当浏览器缓存发现请求的资源已经被存储，会拦截请求，返回资源的拷贝，不去服务器重新下载。 前端性能优化一大杀器。")])]),e._v(" "),a("h2",{attrs:{id:"浏览器缓存的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存的好处"}},[e._v("#")]),e._v(" 浏览器缓存的好处")]),e._v(" "),a("ul",[a("li",[e._v("缓解了服务器压力，不需要每次 P 大点静态资源都去服务器请求。")]),e._v(" "),a("li",[e._v("提升页面性能，打开本地的缓存速度远超从服务器请求来数据。")]),e._v(" "),a("li",[e._v("减少带宽的消耗。")])]),e._v(" "),a("h2",{attrs:{id:"浏览器的缓存策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的缓存策略"}},[e._v("#")]),e._v(" 浏览器的缓存策略")]),e._v(" "),a("p",[e._v("浏览器对于缓存的处理是根据第一次请求资源时返回的响应头来确定的。")]),e._v(" "),a("p",[e._v("根据响应头,浏览器缓存策略一般分为三种："),a("strong",[e._v("强缓存")]),e._v(","),a("strong",[e._v("协商缓存")]),e._v("和"),a("strong",[e._v("启发式缓存")]),e._v("。")]),e._v(" "),a("h3",{attrs:{id:"常见的字段和指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的字段和指令"}},[e._v("#")]),e._v(" 常见的字段和指令")]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[e._v("expires"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" 告知客户端资源缓存失效的绝对时间\nlast"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("modified"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("资源最后一次修改的时间\nEtag"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("文件的特殊标识\ncache"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("control"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("告诉客户端或是服务器如何处理缓存。\ncache"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("control"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("表示客户端可以缓存\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("表示客户端和代理服务器都可缓存"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("如果没有明确指定"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v("，则默认为"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v("\n    no"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("表示需要可以缓存，但每次用应该去向服务器验证缓存是否可用\n    no"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("store"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("表示所有内容都不会缓存，强制缓存，对比缓存都不会触发\n    max"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("xxx"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("表示缓存的内容将在 xxx 秒后失效\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("h3",{attrs:{id:"强缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强缓存"}},[e._v("#")]),e._v(" 强缓存")]),e._v(" "),a("p",[e._v("给浏览器缓存设置过期时间，超过这个时间之后缓存就是过期,浏览器需要重新请求。")]),e._v(" "),a("p",[a("strong",[e._v("强缓存主要是通过 http 请求头中的 "),a("code",[e._v("Cache-Control")]),e._v(" 和 "),a("code",[e._v("Expires")]),e._v(" 两个字段控制。")])]),e._v(" "),a("p",[a("strong",[e._v("expires")])]),e._v(" "),a("ul",[a("li",[e._v("expires 是一个 HTTP/1.0 的字段,它给浏览器设置了一个绝对时间，当浏览器时间超过这个绝对时间之后，重新向服务器发送请求。")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//它描述的是一个绝对时间,用GMT格式的字符串表示")]),e._v("\nExpires"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Wed Feb "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("26")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2018")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("08")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("34")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("GMT")]),e._v("\n")])])]),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("\x3c!--可以在html中使用--\x3e")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("meta")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("expires"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("Wed Feb 26 2018 08:34:17 GMT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("/>")])]),e._v("\n")])])]),a("p",[a("strong",[e._v("缺点")])]),e._v(" "),a("ul",[a("li",[e._v("Expires 返回的是服务器的时间，判断时却用客户端的时间 ，由于用户可能改变客户端的时间，导致判断出错，为此引入了 Cache-Contril:max-age。")])]),e._v(" "),a("p",[a("strong",[e._v("Cache-Control:max-age=2000")])]),e._v(" "),a("ul",[a("li",[e._v("http1.1 中提出了 "),a("code",[e._v("Cache-Control:max-age=2000")]),e._v("，与 "),a("code",[e._v("Expires")]),e._v(" 思路相同，都设置了过期时间。")]),e._v(" "),a("li",[e._v("与 "),a("code",[e._v("Expires")]),e._v(" 不同的是，"),a("code",[e._v("max-age")]),e._v("设置的是相对缓存时间开始往后多少秒，所以不会再受日期不准确的情况影响。")]),e._v(" "),a("li",[a("code",[e._v("max-age")]),e._v(" > "),a("code",[e._v("Expires")]),e._v("，前者优先级大于后者，同时出现时，前后将覆盖后者。")])]),e._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 表示资源会在2000秒后过期，过期后需再次请求。")]),e._v("\nCache"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v("max"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("-")]),e._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2000")]),e._v("\n")])])]),a("ul",[a("li",[e._v("强缓存的优先级高，如果在设置的过期时间内，缓存的那个资源在服务器上已经更新了，客户端不能及时拿到最新的资源。 => 协商缓存来了")])]),e._v(" "),a("h3",{attrs:{id:"协商缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[e._v("#")]),e._v(" 协商缓存")]),e._v(" "),a("p",[e._v("解决无法及时更新资源问题，利用（"),a("code",[e._v("Last-Modified")]),e._v("、"),a("code",[e._v("If-Modified-Since")]),e._v("）和（"),a("code",[e._v("Etag")]),e._v("、"),a("code",[e._v("If-None-Match")]),e._v("）这两对 "),a("code",[e._v("header")]),e._v(" 来对资源做标识，然后由服务器做分析，如果资源未更新，则返回 "),a("code",[e._v("304")]),e._v(" 状态码，浏览器会从缓存中读取资源，否则重新请求资源。")]),e._v(" "),a("p",[a("strong",[e._v("Last-Modified(最后一次修改时间) 与 If-Modified-Since(某某时刻修改的，取前者的值)")])]),e._v(" "),a("ul",[a("li",[a("ol",[a("li",[e._v("浏览器第一次向服务器请求资源，服务器在返回这个资源的同时，在 "),a("code",[e._v("response")]),e._v(" 的 "),a("code",[e._v("header")]),e._v(" 中加上 "),a("code",[e._v("Last-Modified")]),e._v(" 的 "),a("code",[e._v("header")]),e._v("，表示这个资源文件在服务器上的最后修改时间"),a("code",[e._v("Last-Modified:Wed Feb 26 2018 08:34:17 GMT")])])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[e._v("浏览器之后再向服务器请求这个资源时，会在"),a("code",[e._v("request")]),e._v("的"),a("code",[e._v("header")]),e._v("中加上"),a("code",[e._v("If-Modified-Since")]),e._v("的"),a("code",[e._v("header")]),e._v(",值为上次请求这个资源时返回的"),a("code",[e._v("Last-Modified")]),e._v("的值："),a("code",[e._v("Wed Feb 26 2018 08:34:17 GMT")])])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[e._v("服务器再次收到这个资源请求时，"),a("strong",[e._v("会根据浏览器传过来的 "),a("code",[e._v("request")]),e._v(" "),a("code",[e._v("header")]),e._v(" 中 "),a("code",[e._v("If-Modified-Since")]),e._v(" 的修改时间判断资源是否有变化。")]),e._v(" 如果无变化，则 "),a("strong",[e._v("返回 "),a("code",[e._v("304 Not Modified")]),e._v(",不返回资源内容")]),e._v(" ；如有变化，正常返回 200 码资源内容。")])]),e._v(" "),a("ul",[a("li",[e._v("当服务器返回 "),a("code",[e._v("304 Not Modified")]),e._v(" 响应时，"),a("code",[e._v("response")]),e._v(" 中 "),a("code",[e._v("header")]),e._v(" 不会再添加 "),a("code",[e._v("Last-Modified")]),e._v("。")])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[e._v("浏览器收到 "),a("code",[e._v("304")]),e._v(" 的响应后，知道本地资源还没过期，就从缓存中加载资源。")])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[e._v("浏览器收到 "),a("code",[e._v("200")]),e._v(" 的响应后，则从服务器重新加载资源，同时，"),a("code",[e._v("Last-Modified")]),e._v(" 的 "),a("code",[e._v("header")]),e._v(" 值会更新。下次请求时，"),a("code",[e._v("If-Modified-Since")]),e._v(" 会启用上次返回的 "),a("code",[e._v("Last-Modified")]),e._v("。")])])])]),e._v(" "),a("h4",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[e._v("#")]),e._v(" 缺点")]),e._v(" "),a("p",[a("code",[e._v("Last-Modified")]),e._v("、"),a("code",[e._v("If-Modified-Since")]),e._v("都是根据服务器时间返回的"),a("code",[e._v("header")]),e._v("，一般来说，在没有调整服务器时间和篡改客户端缓存的情况下，这两个"),a("code",[e._v("header")]),e._v("配合起来管理协商缓存是非常可靠的，但是它们是以秒为单位进行更新，如果小于该单位高频进行更新的话，则不适合采用该方法。 这时候协商缓就不那么的可靠了。所以就有了另外一对"),a("code",[e._v("header")]),e._v("来管理协商缓存，这对"),a("code",[e._v("header")]),e._v("就是"),a("code",[e._v("ETag")]),e._v("、"),a("code",[e._v("If-None-Match")]),e._v("。")]),e._v(" "),a("p",[a("strong",[e._v("Etag(标签)、If-None-Match(如果不匹配)")])]),e._v(" "),a("ul",[a("li",[a("ol",[a("li",[e._v("浏览器第一次跟服务器请求一个资源，服务器在返回这个资源的同时，在 "),a("code",[e._v("response")]),e._v(" 的 "),a("code",[e._v("header")]),e._v(" 加上 "),a("code",[e._v("ETag")]),e._v("，"),a("strong",[e._v("这个 "),a("code",[e._v("header")]),e._v(" 是服务器根据当前请求的资源生成的一个唯一标识")]),e._v("，这个唯一标识是一个字符串，"),a("code",[e._v("ETag: 5e705774-1396")]),e._v(" 只要资源有变化这个串就不同，跟最后修改时间没有关系，所以能很好的补充 "),a("code",[e._v("Last-Modified")]),e._v(" 的问题.")])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[e._v("浏览器再次跟服务器请求这个资源时，在 "),a("code",[e._v("request")]),e._v(" 的 "),a("code",[e._v("header")]),e._v(" 上加上 "),a("code",[e._v("If-None-Match")]),e._v(" 的 "),a("code",[e._v("header")]),e._v("，这个 "),a("code",[e._v("header")]),e._v(" 的值就是上一次请求时返回的 "),a("code",[e._v("ETag")]),e._v(" 的值 "),a("code",[e._v("If-None-Match: 5e705774-1396")]),e._v("。")])])]),e._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[e._v("服务器再次收到这个带"),a("code",[e._v("If-None-Match")]),e._v(" 的请求时，会根据资源再生成一次 "),a("code",[e._v("ETag")]),e._v("，如果新生成的 "),a("code",[e._v("ETag")]),e._v(" 与 "),a("code",[e._v("If-None-Match")]),e._v(" 的值相同的话，说明资源没有修改并返回 "),a("code",[e._v("304 Not Modified")]),e._v("【由于 "),a("code",[e._v("ETag")]),e._v(" 重新生成过，"),a("code",[e._v("response header")]),e._v(" 中还会把这个 "),a("code",[e._v("ETag")]),e._v(" 返回，即使跟之前没有变化】，反之则被修改过并返回 "),a("code",[e._v("200")]),e._v(" 以及资源内容。")])])])]),e._v(" "),a("p",[a("strong",[a("code",[e._v("ETag")]),e._v(" 相对于 "),a("code",[e._v("Last-Modified")]),e._v(" 也有其优势，可以更加准确的判断文件内容是否被修改， 从而在实际操作中实用程度也更高,但缺点也很明显,由于需要对资源进行生成标识，性能方面就势必有所牺牲。")])]),e._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/cache304.png",alt:"cache",title:"cache"}}),e._v(" "),a("p",[a("strong",[a("code",[e._v("ETag")]),e._v(" 与 "),a("code",[e._v("If-None-Match")]),e._v(" > "),a("code",[e._v("Last-Modified")]),e._v(" 与 "),a("code",[e._v("If-Modified-Since")]),e._v(", 同时存在时, 前者覆盖后者.")])]),e._v(" "),a("h3",{attrs:{id:"优先级总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先级总结"}},[e._v("#")]),e._v(" 优先级总结")]),e._v(" "),a("p",[a("code",[e._v("Cache-Control")]),e._v(" > "),a("code",[e._v("Expires")]),e._v(" > "),a("code",[e._v("ETag")]),e._v(" > "),a("code",[e._v("Last-Modified")])])])}),[],!1,null,null,null);t.default=v.exports}}]);