(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{394:function(t,s,a){"use strict";a.r(s);var e=a(25),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"✨-从输入-url-到看到页面发生的全过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✨-从输入-url-到看到页面发生的全过程"}},[t._v("#")]),t._v(" ✨ 从输入 URL 到看到页面发生的全过程")]),t._v(" "),a("h2",{attrs:{id:"最新修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最新修改"}},[t._v("#")]),t._v(" ##最新修改##")]),t._v(" "),a("blockquote",[a("p",[t._v("最近看了李兵老师讲解浏览器的文章，对从输入 URL 到看到页面发生的全过程这个问题有了更深层次的认知，总结如下：")])]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/urltoview.png",alt:"从输入 URL 到看到页面发生的全过程",title:"从输入 URL 到看到页面发生的全过程"}}),t._v(" "),a("blockquote",[a("p",[t._v("以前的浅显认知")])]),t._v(" "),a("ol",[a("li",[t._v("浏览器查找当前 URL 是否存在缓存，并比较缓存是否过期。")]),t._v(" "),a("li",[t._v("DNS 解析 URL 对应的 IP。")]),t._v(" "),a("li",[t._v("根据 IP 建立 TCP 连接（三次握手）。")]),t._v(" "),a("li",[t._v("HTTP 发起请求。")]),t._v(" "),a("li",[t._v("服务器处理请求，浏览器接收 HTTP 响应。")]),t._v(" "),a("li",[t._v("浏览器解析渲染页面。")]),t._v(" "),a("li",[t._v("关闭 TCP 连接（四次挥手）。")])]),t._v(" "),a("h2",{attrs:{id:"_1-浏览器查找当前-url-是否存在缓存。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-浏览器查找当前-url-是否存在缓存。"}},[t._v("#")]),t._v(" 1. 浏览器查找当前 URL 是否存在缓存。")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("p",[t._v("浏览器首先查询当前 URL 是否有缓存,有的话,再查询是否过期,没过期则读缓存.过期了则访问 web 服务器。")]),t._v(" "),a("p",[a("strong",[a("a",{attrs:{href:"https://ufojs.com/question/4/browsercache.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("重点：浏览器缓存"),a("OutboundLink")],1)])])]),a("h2",{attrs:{id:"_2-解析-url-对应的-ip-地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-解析-url-对应的-ip-地址"}},[t._v("#")]),t._v(" 2. 解析 URL 对应的 IP 地址")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("ol",[a("li",[t._v("浏览器查看自己的 DNS 缓存是否存在。")]),t._v(" "),a("li",[t._v("如果没找到 DNS 缓存，浏览器会接着查找本地的 hosts 文件中是否有这个网址与某个 IP 的映射关系，如果有就调用这个映射 IP，完成域名解析。")]),t._v(" "),a("li",[t._v("如果 hosts 也没有找到，则会在操作系统缓存中查找本地的 DNS 解析器缓存，如果找到则返回。")]),t._v(" "),a("li",[t._v("如果操作系统本地没找到，则会在路由器缓存中进行查找，如果找到则返回。")]),t._v(" "),a("li",[t._v("如果还是没找到，则会通过运营商的 DNS 域名解析服务拿到 IP 地址。")])])]),a("h2",{attrs:{id:"_3-tcp-建立连接-三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-tcp-建立连接-三次握手"}},[t._v("#")]),t._v(" 3. TCP 建立连接（三次握手）")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("p",[t._v("如下图所示，tcp 建立连接的过程：\n"),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/tcp3.png",alt:"tcp",title:"tcp"}})]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一次握手")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SYN = 1")]),t._v("， "),a("code",[t._v("seq(client) = x")]),t._v("\n客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 "),a("code",[t._v("SYN-SENT")]),t._v(" 状态。")])])]),t._v(" "),a("li",[a("p",[t._v("第二次握手")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("SYN = 1")]),t._v("，"),a("code",[t._v("ACK = x + 1")]),t._v("，"),a("code",[t._v("seq(server) = y")]),t._v("服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入"),a("code",[t._v("SYN-RECEIVED")]),t._v(" 状态")])])]),t._v(" "),a("li",[a("p",[t._v("第三次握手")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ACK = y + 1")]),t._v("，s "),a("code",[t._v("seq(client) = y + 1")]),t._v("\n客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 "),a("code",[t._v("ESTABLISHED")]),t._v(" 状态，服务端收到这个应答后也进入 "),a("code",[t._v("ESTABLISHED")]),t._v(" 状态，此时连接建立成功。")])])])]),t._v(" "),a("h4",{attrs:{id:"为什么是三次握手-二次-四次不行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是三次握手-二次-四次不行"}},[t._v("#")]),t._v(" 为什么是三次握手？二次，四次不行？")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("第一次：")]),t._v(" "),a("blockquote",[a("p",[t._v("Client 什么都不能确认")]),t._v(" "),a("p",[t._v("Server 确认了对方发送正常")])])]),t._v(" "),a("li",[a("p",[t._v("第二次")]),t._v(" "),a("blockquote",[a("p",[t._v("Client 确认：自己发送/接收正常，对方发送/接收正常")]),t._v(" "),a("p",[t._v("Server 确认：自己接收正常 ，对方发送正常")])])]),t._v(" "),a("li",[a("p",[t._v("第三次")]),t._v(" "),a("blockquote",[a("p",[t._v("Client 确认：自己发送/接收正常， 对方发送/接收正常")]),t._v(" "),a("p",[t._v("Server 确认：自己发送/接收正常，对方发送/接收正常")])])])]),t._v(" "),a("p",[a("strong",[t._v("所以通过三次握手确认双方收发功能都正常，二次无法确认，四次也可以但是显得比较多余。")])])]),a("h2",{attrs:{id:"_4-http-发起请求、服务器处理请求、浏览器接收-http-响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-http-发起请求、服务器处理请求、浏览器接收-http-响应"}},[t._v("#")]),t._v(" 4. HTTP 发起请求、服务器处理请求、浏览器接收 HTTP 响应")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("h3",{attrs:{id:"http-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求"}},[t._v("#")]),t._v(" HTTP 请求")]),t._v(" "),a("ul",[a("li",[t._v("完整的 HTTP 请求包含请求行、请求头、请求体三部分。")])]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/http1.png",alt:"http",title:"http"}}),t._v(" "),a("ul",[a("li",[t._v("服务器收到浏览器发送的 HTTP 请求之后，会将收到的 HTTP 报文封装成 HTTP 的 Request 对象，并通过不同的 web 服务器进行处理，处理完的结果以 HTTP 的 Response 对象返回，主要包括状态码、响应头、响应报文三个部分。")]),t._v(" "),a("li",[t._v("完整的 HTTP 请求报文一般包括：通用头部、请求/响应头部、请求/响应体")])]),t._v(" "),a("h4",{attrs:{id:"通用头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通用头部"}},[t._v("#")]),t._v(" 通用头部")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//General")]),t._v("\n\nRequest Url"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 请求的web服务器地址\n\nRequest Method"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 请求方式\n（"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("POST")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OPTIONS")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PUT")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DELETE")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CONNECT")]),t._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TRACE")]),t._v("）\n\nStatus Code"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 请求的返回状态码，如"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v("代表成功\n\nRemote Address"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 请求的远程服务器地址（会转为"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IP")]),t._v("）\n\nReferrer Policy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("引用策略"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("用来监管哪些访问来源信息")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("IE")]),t._v("暂不支持"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"请求-响应头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求-响应头部"}},[t._v("#")]),t._v(" 请求/响应头部")]),t._v(" "),a("p",[a("strong",[t._v("常用的请求头部分：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 接收类型，表示浏览器支持的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MIME")]),t._v("类型\n（对标服务端返回的Content"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type）\n\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Encoding"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 浏览器支持的压缩类型"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如gzip等"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("超出类型不能接收\n\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type：客户端发送出去实体内容的类型\n\nCache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 指定请求和响应遵循的缓存机制，如no"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("cache\n\nIf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Since：对应服务端的Last"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified，用来匹配看文件是否变动，只能精确到"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("s之内，http1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("中\n\nExpires：缓存控制，在这个时间内不会请求，直接使用缓存，http1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("，而且是服务端时间\n\nMax"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age：代表资源在本地缓存多少秒，有效时间内不会请求，而是使用缓存，http1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("中\n\nIf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("None"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Match：对应服务端的ETag，用来匹配文件内容是否改变（非常精确），http1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("中\n\nCookie"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 有cookie并且同域访问时会自动带上\n\nConnection"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 当浏览器与服务器通信时对于长连接如何进行处理"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("如keep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive\n\nHost：请求的服务器"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),t._v("\n\nOrigin：最初的请求是从哪里发起的（只会精确到端口）"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("Origin比Referer更尊重隐私\n\nReferer：该页面的来源"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("适用于所有类型的请求，会精确到详细页面地址，csrf拦截常用到这个字段"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nUser"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Agent：用户客户端的一些必要信息，如"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("UA")]),t._v("头部等\n\n")])])]),a("p",[a("strong",[t._v("常用的响应头部分：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Access"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Headers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求Headers\n\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Methods"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求方法\n\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" 服务器端允许的请求Origin头部（譬如为"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("）\n\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type：服务端返回的实体内容的类型\n\nDate：数据从服务器发送的时间\n\nCache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control：告诉浏览器或其他客户，什么环境可以安全的缓存文档\n\nLast"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Modified：请求资源的最后修改时间\n\nExpires：应该在什么时候认为文档已经过期"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("从而不再缓存它\n\nMax"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("age：客户端的本地资源应该缓存多少秒，开启了Cache"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control后有效\n\nETag：请求变量的实体标签的当前值\n\nSet"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Cookie：设置和页面关联的cookie，服务器通过这个头部把cookie传给客户端\n\nKeep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Alive：如果客户端有keep"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("alive，服务端也会有响应（如timeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),t._v("）\n\nServer：服务器的一些相关信息\n\n")])])]),a("ul",[a("li",[t._v("一般来说，请求头部和响应头部是匹配分析的。"),a("br")]),t._v(" "),a("li",[t._v("比如，请求头部的"),a("code",[t._v("Accept")]),t._v("要和响应头部的"),a("code",[t._v("Content-Type")]),t._v("匹配，否则会报错。"),a("br")]),t._v(" "),a("li",[t._v("比如，跨域请求时，请求头部的"),a("code",[t._v("Origin")]),t._v("要匹配响应头部的"),a("code",[t._v("Access-Control-Allow-Origin")]),t._v("，否则会报跨域错误。"),a("br")]),t._v(" "),a("li",[t._v("比如，在使用缓存时，请求头部的"),a("code",[t._v("If-Modified-Since")]),t._v("、"),a("code",[t._v("If-None-Match")]),t._v("分别和响应头部的"),a("code",[t._v("Last-Modified")]),t._v("、"),a("code",[t._v("ETag")]),t._v("对应。")])]),t._v(" "),a("h3",{attrs:{id:"请求-响应实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求-响应实体"}},[t._v("#")]),t._v(" 请求/响应实体")]),t._v(" "),a("p",[t._v("请求实体中会将一些需要的参数都放入进入（用于 post 请求）。")]),t._v(" "),a("p",[t._v("譬如实体中可以放参数的序列化形式（a=1&b=2 这种），或者直接放表单对象（Form Data 对象，上传时可以夹杂参数以及文件），等等。")]),t._v(" "),a("p",[t._v("一般响应实体中，就是放服务端需要传给客户端的内容。")]),t._v(" "),a("p",[t._v("一般现在的接口请求时，实体中就是对于的信息的 json 格式，而像页面请求这种，里面就是直接放了一个 html 字符串，然后浏览器自己解析并渲染。")]),t._v(" "),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/httpstatus.png",alt:"https",title:"https"}})]),a("h2",{attrs:{id:"_5-浏览器解析渲染页面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器解析渲染页面"}},[t._v("#")]),t._v(" 5. 浏览器解析渲染页面")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("p",[t._v("浏览器内核拿到内容后，渲染步骤大致可以分为以下几步：")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("解析 HTML，构建 DOM 树")]),t._v(" "),a("li",[t._v("解析 CSS，生成 CSS 规则树")]),t._v(" "),a("li",[t._v("合并 DOM 树和 CSS 规则，生成 render 树")]),t._v(" "),a("li",[t._v("布局 render 树（Layout/reflow），负责各元素尺寸、位置的计算")]),t._v(" "),a("li",[t._v("绘制 render 树（paint），绘制页面像素信息")]),t._v(" "),a("li",[t._v("浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（composite），显示在屏幕上")])])]),t._v(" "),a("p",[t._v("reflow：也称作 layout，中文叫回流，一般意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树，这个过程称为 reflow。")]),t._v(" "),a("p",[t._v("repaint：中文重绘，意味着元素发生的改变只是影响了元素的一些外观之类的时候(例如：背景色，边框颜色，文字颜色等)，此时只需要应用新样式绘制这个元素就可以了。")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("根据 HTML 解析 DOM 树")]),t._v(" "),a("ul",[a("li",[t._v("根据 HTML 的内容，将标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即先构建当前节点的所有子节点，再构建下一个兄弟节点。")]),t._v(" "),a("li",[t._v("在读取 HTML 文档，构建 DOM 树的过程中，若遇到 script 标签，则 DOM 树的构建会暂停，直至脚本执行完毕。")])])]),t._v(" "),a("li",[a("p",[t._v("根据 CSS 解析生成 CSS 规则树")]),t._v(" "),a("ul",[a("li",[t._v("解析 CSS 规则树时 js 执行将暂停，直至 CSS 规则树就绪。")]),t._v(" "),a("li",[t._v("浏览器在 CSS 规则树生成之前不会进行渲染。")])])]),t._v(" "),a("li",[a("p",[t._v("结合 DOM 树和 CSS 规则树，生成渲染树")]),t._v(" "),a("ul",[a("li",[t._v("DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。")]),t._v(" "),a("li",[t._v("精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。")])])]),t._v(" "),a("li",[a("p",[t._v("根据渲染树计算每一个节点的信息（布局）")]),t._v(" "),a("ul",[a("li",[t._v("布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸。")]),t._v(" "),a("li",[t._v("回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。")])])]),t._v(" "),a("li",[a("p",[t._v("根据计算好的信息绘制页面")]),t._v(" "),a("ul",[a("li",[t._v("绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。")]),t._v(" "),a("li",[t._v("重绘 "),a("code",[t._v("repaint")]),t._v("：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。")]),t._v(" "),a("li",[t._v("回流 "),a("code",[t._v("reflow")]),t._v("：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。\n"),a("img",{staticClass:"zoom-custom-imgs",attrs:{src:"/img/question/network/domrender.png",alt:"domrender",title:"domrender"}})])])])])]),a("h2",{attrs:{id:"_6-tcp-关闭连接-四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-tcp-关闭连接-四次挥手"}},[t._v("#")]),t._v(" 6. TCP 关闭连接（四次挥手）")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('<img src="/img/question/network/tcp4.png" alt="tcp" title="tcp" class="zoom-custom-imgs">\n')])])]),a("ul",[a("li",[t._v("第一次挥手：\n"),a("ul",[a("li",[t._v("Client 发送一个 FIN，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。(第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧)")])])]),t._v(" "),a("li",[t._v("第二次挥手：\n"),a("ul",[a("li",[t._v("Server 收到 FIN 后，发送一个 ACK 给 Client，确认序号为收到序号+1（与 SYN 相同，一个 FIN 占用一个序号），Server 进入 CLOSE_WAIT 状态。(第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧)")])])]),t._v(" "),a("li",[t._v("第三次挥手：\n"),a("ul",[a("li",[t._v("Server 发送一个 FIN，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)")])])]),t._v(" "),a("li",[t._v("第四次挥手：\n"),a("ul",[a("li",[t._v("Client 收到 FIN 后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 给 Server，确认序号为收到序号+1，Server 进入 CLOSED 状态，完成四次挥手。(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)")])])])])]),a("h2",{attrs:{id:"端口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#端口"}},[t._v("#")]),t._v(" 端口")]),t._v(" "),a("details",{staticClass:"custom-block details open tip"},[a("summary",[t._v("点击查看")]),a("p",[t._v("用来标识同一个主机上通信的不同应用程序")]),t._v(" "),a("p",[t._v("一个端口只能分配给一个应用程序，如果服务器有两个程序 A 和 B，分别启动了 A 服务 B 服务，它们监听同一个端口，那有数据来的时候，将无法判断这个数据分给 A 还是 B。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);